window.SPID = function() {
    "use strict";
    var self = this, _agidSpidEnterWrapper, _spidIdpList, _infoModal, _spidPanelSelect, _version = "{{ VERSION }}", _lang = "it", _i18n = {}, _availableProviders, _defaultSelector = "#spid-button", _selector, _protocol = "SAML";
    this.resources = {};
    this.templates = {};
    function getTemplate(templateName, content) {
        return self.templates[templateName].call(self, content);
    }
    function showElement(dom) {
        dom.removeAttribute("hidden");
    }
    function hideElement(dom) {
        var hiddenAttribute = document.createAttribute("hidden");
        dom.setAttributeNode(hiddenAttribute);
    }
    function giveFocusTo(element) {
        var focusElement = setInterval(function() {
            element.focus();
        }, 100);
        _spidPanelSelect.addEventListener("focus", function() {
            clearInterval(focusElement);
        });
    }
    function closeInfoModal() {
        hideElement(_infoModal);
        _infoModal.innerHTML = "";
        giveFocusTo(_spidPanelSelect);
    }
    function openInfoModal(htmlContent) {
        _infoModal.innerHTML = getTemplate("infoModalContent", htmlContent);
        showElement(_infoModal);
        document.querySelector("#closemodalbutton").addEventListener("click", closeInfoModal);
    }
    function shuffleIdp() {
        for (var i = _spidIdpList.children.length; i >= 0; i--) {
            _spidIdpList.appendChild(_spidIdpList.children[Math.random() * i | 0]);
        }
    }
    function handleEscKeyEvent(event) {
        var isEscKeyHit = event.keyCode === 27, isInfoModalVisible = !_infoModal.hasAttribute("hidden");
        if (isEscKeyHit) {
            if (isInfoModalVisible) {
                closeInfoModal();
            } else {
                hideProvidersPanel();
            }
        }
    }
    function showProvidersPanel() {
        shuffleIdp();
        showElement(_agidSpidEnterWrapper);
        giveFocusTo(_spidPanelSelect);
        document.addEventListener("keyup", handleEscKeyEvent);
    }
    function hideProvidersPanel() {
        hideElement(_agidSpidEnterWrapper);
        document.removeEventListener("keyup", handleEscKeyEvent);
    }
    function renderAvailableProviders() {
        var agid_spid_enter = document.querySelector("#agid-spid-enter"), spidProvidersButtonsHTML = "";
        _availableProviders.forEach(function(provider) {
            spidProvidersButtonsHTML += getTemplate("spidProviderButton", provider);
        });
        agid_spid_enter.innerHTML = getTemplate("spidProviderChoiceModal", spidProvidersButtonsHTML);
        document.querySelector("#agid-spid-panel-close-button").addEventListener("click", hideProvidersPanel);
        document.querySelector("#agid-cancel-access-button").addEventListener("click", hideProvidersPanel);
        document.querySelector("#nospid").addEventListener("click", function() {
            openInfoModal(getTemplate("nonHaiSpid"));
        });
        document.querySelector("#cosaspid").addEventListener("click", function() {
            openInfoModal(getTemplate("cosaSpid"));
        });
    }
    function ajaxRequest(method, url, payload, done, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open(method, url);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200 && xhr.responseText) {
                    done(null, JSON.parse(xhr.responseText), callback);
                } else {
                    done(xhr.responseText, null, callback);
                }
            }
        }.bind(this);
        xhr.send(JSON.stringify(payload));
    }
    function getLocalisedMessages(setMessages) {
        var languageRequest = {
            lang: _lang
        };
        ajaxRequest("GET", self.resources.localisationEndpoint, languageRequest, setMessages);
    }
    function getAvailableProviders(setProviders) {
        ajaxRequest("GET", self.resources.providersEndpoint, null, setProviders);
    }
    function loadStylesheet(url) {
        var linkElement = document.createElement("link");
        linkElement.rel = "stylesheet";
        linkElement.type = "text/css";
        linkElement.href = url;
        document.head.appendChild(linkElement);
    }
    function addContainersWrapper(wrapperID) {
        _agidSpidEnterWrapper = document.createElement("section");
        _agidSpidEnterWrapper.id = wrapperID;
        hideElement(_agidSpidEnterWrapper);
        document.body.insertBefore(_agidSpidEnterWrapper, document.body.firstChild);
        _agidSpidEnterWrapper.innerHTML = getTemplate("spidMainContainers");
    }
    function getSelectors() {
        _spidIdpList = document.querySelector("#agid-spid-idp-list");
        _infoModal = document.querySelector("#agid-infomodal");
        _spidPanelSelect = document.querySelector("#agid-spid-panel-select");
    }
    function renderSpidModalContainers() {
        var agidSpidEnterWrapperId = "agid-spid-enter-container", existentWrapper = document.getElementById(agidSpidEnterWrapperId);
        if (!existentWrapper) {
            loadStylesheet(self.resources.stylesheetUrl);
            addContainersWrapper(agidSpidEnterWrapperId);
        }
    }
    function renderModule() {
        renderSpidModalContainers();
        renderAvailableProviders();
        self.updateSpidButtons();
        getSelectors();
    }
    function getMergedProvidersData(agidProvidersList, options) {
        var property, hasProtocol;
        return agidProvidersList.map(function(agidIdpConfig) {
            agidIdpConfig.url = options.url;
            agidIdpConfig.method = options.method || "GET";
            if (agidIdpConfig.method === "POST") {
                agidIdpConfig.fieldName = options.fieldName;
                agidIdpConfig.extraFields = options.extraFields;
            }
            for (property in options.mapping) {
                if (agidIdpConfig.entityID === property) {
                    agidIdpConfig.entityID = options.mapping[property];
                }
            }
            if (!agidIdpConfig.supported) {
                if (options.supported.indexOf(agidIdpConfig.entityID) === -1 || agidIdpConfig.protocols.indexOf(options.protocol) === -1) {
                    agidIdpConfig.supported = false;
                } else {
                    agidIdpConfig.supported = true;
                }
            } else if (agidIdpConfig.protocols.indexOf(options.protocol) === -1) {
                agidIdpConfig.supported = false;
            }
            return agidIdpConfig;
        });
    }
    function addExtraProviders(agidProvidersList, options) {
        var i;
        if (options.extraProviders) {
            for (i = 0; i < options.extraProviders.length; i++) {
                options.extraProviders[i].supported = true;
            }
            agidProvidersList = agidProvidersList.concat(options.extraProviders);
        }
        return agidProvidersList;
    }
    function checkMandatoryOptions(options) {
        if (!options || !options.url || !options.supported || options.supported.length < 1) {
            return false;
        } else {
            return true;
        }
    }
    function getMergedDefaultOptions(options) {
        options = options || {};
        options.lang = options.lang || _lang;
        options.selector = options.selector || _defaultSelector;
        _selector = options.selector;
        options.protocol = options.protocol || _protocol;
        return options;
    }
    function manageError(err, errorCallback) {
        console.error("Si è verificato un errore nel caricamento dei dati", err);
        errorCallback && errorCallback();
    }
    this.getVersion = function() {
        return _version;
    };
    this.init = function(options, success, error) {
        if (!checkMandatoryOptions(options)) {
            console.error("Non sono stati forniti i parametri obbligatori della configurazione");
            error && error();
            return;
        }
        self.initResources();
        options = getMergedDefaultOptions(options);
        _lang = options.lang;
        getLocalisedMessages(function(err, data) {
            if (err) {
                manageError(err, error);
                return;
            }
            self.initTemplates();
            _i18n = data;
            getAvailableProviders(function(err, data) {
                if (err) {
                    manageError(err, error);
                    return;
                }
                _availableProviders = addExtraProviders(data.spidProviders, options);
                _availableProviders = getMergedProvidersData(_availableProviders, options);
                renderModule();
                success && success();
            });
        });
    };
    this.changeLanguage = function(lang, success, error) {
        _lang = lang;
        getLocalisedMessages(function(err, data) {
            if (err) {
                manageError(err, error);
                return;
            }
            _i18n = data;
            renderModule();
            success && success();
        });
    };
    this.updateSpidButtons = function() {
        var spidButtonsPlaceholders = document.querySelectorAll(_selector), hasButtonsOnPage = spidButtonsPlaceholders.length, i = 0, j = 0, foundDataSize, dataSize, supportedSizes = [ "s", "m", "l" ], isSupportedSize, spidButtons;
        if (!_availableProviders) {
            console.error("Si è verificato un errore nel caricamento dei providers, impossibile renderizzare i pulsanti SPID");
            return;
        }
        if (!hasButtonsOnPage) {
            console.warn("Nessun placeholder HTML trovato nella pagina per i pulsanti SPID");
            return;
        }
        for (i; i < hasButtonsOnPage; i++) {
            foundDataSize = spidButtonsPlaceholders[i].getAttribute("data-size");
            dataSize = foundDataSize.toLowerCase();
            isSupportedSize = supportedSizes.indexOf(dataSize) !== -1;
            if (isSupportedSize) {
                spidButtonsPlaceholders[i].innerHTML = getTemplate("spidButton", dataSize);
            } else {
                console.error("Le dimensioni supportate sono", supportedSizes, "trovato invece:", foundDataSize, spidButtonsPlaceholders[i]);
            }
        }
        spidButtons = document.querySelectorAll(".agid-spid-enter");
        for (j; j < spidButtons.length; j++) {
            spidButtons[j].addEventListener("click", showProvidersPanel);
        }
    };
    this.setResources = function(resources) {
        self.resources = resources;
    };
    this.getResources = function() {
        return JSON.parse(JSON.stringify(self.resources));
    };
    this.getI18n = function(labelKey, placeholderValue) {
        var locale = _lang, copy = _i18n.lang && _i18n.lang[locale] && _i18n.lang[locale][labelKey], placeholder = /\{\d}/;
        if (placeholderValue) {
            copy = copy.replace(placeholder, placeholderValue);
        }
        if (!copy) {
            console.error("La chiave richiesta non è disponibile nella lingua selezionata:", locale, labelKey);
        }
        return copy || labelKey;
    };
};

(function() {
    function svgWithPngFallback(imagePath, altText) {
        return [ '<img aria-hidden="true"', 'src="', this.getResources().assetsBaseUrl, imagePath, '.svg"', "onerror=\"this.src='", this.getResources().assetsBaseUrl, imagePath, ".png'; this.onerror=null;\"", 'alt="', altText, '" />' ].join("");
    }
    function hiddenField(name, value) {
        return [ '<input type="hidden" name="', name, '" value="', value, '" />' ].join("");
    }
    window.SPID.prototype.initTemplates = function() {
        this.templates = {
            spidMainContainers: function() {
                return [ '<div id="agid-spid-enter">', "</div>", '<div id="agid-infomodal" class="modal" aria-live="assertive" tabindex="0" hidden>', "</div>" ].join("");
            },
            spidProviderChoiceModal: function(spidProvidersButtons) {
                return [ '<div id="agid-spid-enter-anim"></div>', '<section id="agid-spid-panel-select" aria-labelledby="agid-spid-enter-title-page" tabindex="0">', '<header id="agid-spid-panel-header">', '<nav class="agid-spid-panel-back agid-spid-panel-element" aria-controls="agid-spid-panel-select">', '<button tabindex="0" id="agid-spid-panel-close-button" class="agid-spid-button agid-navigable" aria-labelledby="agid-cancel-access-button">', svgWithPngFallback.call(this, "img/x-icon", this.getI18n("naviga_indietro")), "</button>", "</nav>", '<div class="agid-spid-panel-logo agid-spid-panel-element">', svgWithPngFallback.call(this, "img/spid-logo-c-lb", this.getI18n("alt_logo_SPID")), "</div>", "</header>", '<div id="agid-spid-panel-content">', '<div class="agid-spid-panel-content-center">', '<div id ="agid-spid-enter-title-container">', '<h1 id="agid-spid-enter-title-page" class="agid-font">', this.getI18n("scegli_provider_SPID"), "</h1>", "</div>", '<div id="agid-spid-idp-list" class="agid-spid-row">', spidProvidersButtons, "</div>", '<div id="agid-cancel-access-container">', '<button id="agid-cancel-access-button" class="agid-transparent-button agid-font agid-navigable">', "<span>", this.getI18n("annulla_accesso"), "</span>", "</button>", "</div>", '<div id="agid-logo-container" aria-hidden="true">', svgWithPngFallback.call(this, "img/agid-logo-bb-short"), "</div>", "</div>", "</div>", '<footer id="agid-spid-panel-footer">', '<div id="agid-action-button-container">', '<button id="nospid" class="agid-action-button agid-font agid-navigable">', "<span>", this.getI18n("non_hai_SPID"), "</span>", "</button>", '<button id="cosaspid" class="agid-action-button agid-font agid-navigable">', "<span>", this.getI18n("cosa_SPID"), "</span>", "</button>", "</div>", "</footer>", "</section>" ].join("");
            },
            spidProviderButton: function(providerData) {
                var providerPayloadInputs = "", providerUri = "", providerEntityName = providerData.active ? this.getI18n("accedi_con_idp", providerData.entityName) : this.getI18n("idp_disabled"), providerID = providerData.entityName.replace(" ", "-");
                if (providerData.method === "POST") {
                    var fieldName = providerData.fieldName || "idp";
                    providerPayloadInputs += hiddenField(fieldName, providerData.entityID);
                    if (providerData.extraFields) {
                        for (property in providerData.extraFields) {
                            providerPayloadInputs += hiddenField(property, providerData.extraFields[property]);
                        }
                    }
                    providerUri = providerData.url;
                } else if (providerData.method === "GET") {
                    providerUri = providerData.url.replace("{{idp}}", encodeURIComponent(providerData.entityID));
                }
                return [ '<span class="agid-spid-col l3 m6 s6 xs12">', '<form id="agid-spid-provider-', providerID, '"', 'action="', providerUri, '" method="', providerData.method, '">', '<button type="submit"', 'class="agid-spid-idp-button"', 'title="', providerEntityName, '"', 'style="background-image: url(', this.getResources().assetsBaseUrl, "img/idp-logos/", providerData.logo, ')"', providerData.supported ? "" : "disabled", ">", "</button>", providerPayloadInputs, "</form>", "</span>" ].join("");
            },
            spidButton: function(sizeClass) {
                return [ "\x3c!-- AGID - SPID BUTTON ", sizeClass.toUpperCase(), " * begin * --\x3e", '<button class="agid-spid-enter agid-font agid-spid-enter-size-', sizeClass, '" hidden>', '<span aria-hidden="true" class="agid-spid-enter-icon">', svgWithPngFallback.call(this, "img/spid-ico-circle-bb", this.getI18n("entra_con_SPID")), "</span>", '<span class="agid-spid-enter-text">', this.getI18n("entra_con_SPID"), "</span>", "</button>", "\x3c!-- AGID - SPID BUTTON ", sizeClass.toUpperCase(), " * end * --\x3e" ].join("");
            },
            infoModalContent: function(htmlContent) {
                return [ '<div class="modal-content agid-font">', '<button id="closemodalbutton"', 'class="close agid-navigable"', 'tabindex="0"', 'aria-label="', this.getI18n("aria_chiudi_modale"), '">', '<b aria-hidden="true">&times;</b>', "</button>", '<div id="agid-infomodal-content" role="main" tabindex="0" aria-labelledby="agid-infomodal-title">', htmlContent, "</div>", "</div>" ].join("");
            },
            nonHaiSpid: function() {
                return [ '<h1 id="agid-infomodal-title">Non hai Spid?</h1>', "<ul>", "<li>Morbi in sem quis dui placerat ornare. Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu. Cras consequat.</li>", "<li>Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus.</li>", "<li>Phasellus ultrices nulla quis nibh. Quisque a lectus. Donec consectetuer ligula vulputate sem tristique cursus. Nam nulla quam, gravida non, commodo a, sodales sit amet, nisi.</li>", "<li>Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</li>", "</ul>" ].join("");
            },
            cosaSpid: function() {
                return [ '<h1 id="agid-infomodal-title">Cosa è SPID</h1>', '<p><strong>Pellentesque habitant morbi tristique</strong> senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. <em>Aenean ultricies mi vitae est.</em> Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, <code>commodo vitae</code>, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. <a href="#">Donec non enim</a> in turpis pulvinar facilisis. Ut felis.</p>', "<h2>Header Level 2</h2>", "<ol>", "<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>", "<li>Aliquam tincidunt mauris eu risus.</li>", "</ol>", "<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus magna. Cras in mi at felis aliquet congue. Ut a est eget ligula molestie gravida. Curabitur massa. Donec eleifend, libero at sagittis mollis, tellus est malesuada tellus, at luctus turpis elit sit amet quam. Vivamus pretium ornare est.</p></blockquote>", "<h3>Header Level 3</h3>", "<ul>", "<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>", "<li>Aliquam tincidunt mauris eu risus.</li>", "</ul>" ].join("");
            }
        };
    };
})();

window.SPID.prototype.initResources = function() {
    this.resources = {
        assetsBaseUrl: "",
        stylesheetUrl: "dev/agid-spid-enter.min.css",
        providersEndpoint: "/src/data/spidProviders.json",
        localisationEndpoint: "/src/data/spidI18n.json"
    };
};
